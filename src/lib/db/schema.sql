
-- schema.sql

-- Drop existing functions and tables if they exist to ensure a clean slate.
-- This section makes the script re-runnable without errors.
DROP FUNCTION IF EXISTS public.get_table_columns(text);
DROP FUNCTION IF EXISTS public.dynamic_insert(text, jsonb);

-- Create a helper function to get column names of a table
CREATE OR REPLACE FUNCTION public.get_table_columns(table_name_text text)
RETURNS TABLE(column_name text) AS $$
BEGIN
  RETURN QUERY 
  SELECT att.attname::text
  FROM pg_class tbl
  JOIN pg_attribute att ON att.attrelid = tbl.oid
  WHERE tbl.relname = table_name_text
    AND att.attnum > 0
    AND NOT att.attisdropped;
END;
$$ LANGUAGE plpgsql;


-- Grant execution rights for the helper function
GRANT EXECUTE ON FUNCTION public.get_table_columns(text) TO postgres;
GRANT EXECUTE ON FUNCTION public.get_table_columns(text) TO anon;
GRANT EXECUTE ON FUNCTION public.get_table_columns(text) TO authenticated;
GRANT EXECUTE ON FUNCTION public.get_table_columns(text) TO service_role;


-- Main Tables
-- These use "GENERATED BY DEFAULT AS IDENTITY" for auto-incrementing primary keys.

CREATE TABLE IF NOT EXISTS public.rcn_intake (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    intake_batch_id TEXT UNIQUE NOT NULL,
    item_name TEXT DEFAULT 'Raw Cashew Nuts' NOT NULL,
    gross_weight_kg NUMERIC NOT NULL,
    tare_weight_kg NUMERIC DEFAULT 0,
    supplier_id TEXT NOT NULL,
    arrival_datetime TIMESTAMPTZ NOT NULL,
    moisture_content_percent NUMERIC,
    foreign_matter_percent NUMERIC,
    visual_defects_percent NUMERIC,
    visual_quality_grade TEXT,
    truck_license_plate TEXT,
    receiver_id TEXT NOT NULL,
    supervisor_id TEXT,
    notes TEXT
);

CREATE TABLE IF NOT EXISTS public.rcn_output_logs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    output_batch_id TEXT UNIQUE NOT NULL,
    linked_rcn_intake_batch_id TEXT,
    output_datetime TIMESTAMPTZ NOT NULL,
    quantity_kg NUMERIC NOT NULL,
    destination_stage TEXT NOT NULL,
    authorized_by_id TEXT NOT NULL,
    notes TEXT
);

CREATE TABLE IF NOT EXISTS public.other_materials_intake (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    intake_batch_id TEXT UNIQUE NOT NULL,
    item_name TEXT NOT NULL,
    quantity NUMERIC NOT NULL,
    unit TEXT NOT NULL,
    supplier_id TEXT NOT NULL,
    arrival_datetime TIMESTAMPTZ NOT NULL,
    receiver_id TEXT NOT NULL,
    supervisor_id TEXT,
    notes TEXT
);

CREATE TABLE IF NOT EXISTS public.goods_dispatched (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    dispatch_batch_id TEXT UNIQUE NOT NULL,
    item_name TEXT NOT NULL,
    quantity NUMERIC NOT NULL,
    unit TEXT NOT NULL,
    destination TEXT NOT NULL,
    dispatch_type TEXT,
    dispatcher_id TEXT NOT NULL,
    dispatch_datetime TIMESTAMPTZ NOT NULL,
    document_reference TEXT,
    notes TEXT
);

CREATE TABLE IF NOT EXISTS public.steaming_processes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    steam_batch_id TEXT UNIQUE NOT NULL,
    linked_intake_batch_id TEXT,
    steam_start_time TIMESTAMPTZ NOT NULL,
    steam_end_time TIMESTAMPTZ NOT NULL,
    steam_duration_minutes INT,
    steam_temperature_celsius NUMERIC,
    steam_pressure_psi NUMERIC,
    weight_before_steam_kg NUMERIC,
    weight_after_steam_kg NUMERIC,
    weight_loss_percent NUMERIC,
    equipment_id TEXT,
    supervisor_id TEXT,
    notes TEXT
);

CREATE TABLE IF NOT EXISTS public.shelling_processes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    shell_batch_id TEXT UNIQUE NOT NULL,
    linked_steam_batch_id TEXT,
    shell_start_time TIMESTAMPTZ NOT NULL,
    shell_end_time TIMESTAMPTZ NOT NULL,
    shell_duration_minutes INT,
    steamed_weight_input_kg NUMERIC,
    shelled_kernels_weight_kg NUMERIC,
    shell_waste_weight_kg NUMERIC,
    broken_kernels_weight_kg NUMERIC,
    machine_throughputs JSONB,
    total_output_kg NUMERIC,
    shelling_rate_percent NUMERIC,
    breakage_rate_percent NUMERIC,
    material_balance_variance_percent NUMERIC,
    operator_id TEXT,
    supervisor_id TEXT,
    notes TEXT
);

CREATE TABLE IF NOT EXISTS public.drying_processes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    dry_batch_id TEXT UNIQUE NOT NULL,
    linked_shelling_batch_id TEXT,
    dry_start_time TIMESTAMPTZ NOT NULL,
    dry_end_time TIMESTAMPTZ NOT NULL,
    drying_duration_hours INT,
    wet_kernel_weight_kg NUMERIC,
    dry_kernel_weight_kg NUMERIC,
    drying_temperature_celsius NUMERIC,
    final_moisture_percent NUMERIC,
    moisture_loss_percent NUMERIC,
    drying_method TEXT,
    weather_conditions TEXT,
    equipment_id TEXT,
    quality_check_status TEXT,
    supervisor_id TEXT,
    notes TEXT
);

CREATE TABLE IF NOT EXISTS public.peeling_processes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    peel_batch_id TEXT UNIQUE NOT NULL,
    linked_drying_batch_id TEXT,
    peel_start_time TIMESTAMPTZ NOT NULL,
    peel_end_time TIMESTAMPTZ NOT NULL,
    peeling_duration_minutes INT,
    dried_kernel_input_kg NUMERIC,
    peeled_kernels_kg NUMERIC,
    peel_waste_kg NUMERIC,
    defective_kernels_kg NUMERIC,
    peeling_efficiency_percent NUMERIC,
    defect_rate_percent NUMERIC,
    peeling_method TEXT,
    workers_assigned_count INT,
    machine_id TEXT,
    shift TEXT,
    supervisor_id TEXT,
    notes TEXT
);

CREATE TABLE IF NOT EXISTS public.calibration_logs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    calibration_log_id TEXT UNIQUE NOT NULL,
    equipment_id TEXT NOT NULL,
    calibration_date DATE NOT NULL,
    parameter_checked TEXT NOT NULL,
    result TEXT NOT NULL,
    next_due_date DATE,
    calibrated_by_id TEXT NOT NULL,
    supervisor_id TEXT,
    notes TEXT
);

CREATE TABLE IF NOT EXISTS public.rcn_quality_assessments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    qa_rcn_batch_id TEXT UNIQUE NOT NULL,
    linked_intake_batch_id TEXT,
    assessment_datetime TIMESTAMPTZ NOT NULL,
    sample_weight_kg NUMERIC,
    moisture_content_percent NUMERIC,
    foreign_matter_percent NUMERIC,
    defective_nuts_percent NUMERIC,
    nut_count_per_kg INT,
    visual_grade_assigned TEXT,
    qc_officer_id TEXT,
    notes TEXT
);

CREATE TABLE IF NOT EXISTS public.machine_grading_logs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    cs_batch_id TEXT UNIQUE NOT NULL,
    linked_peel_batch_id TEXT,
    cs_start_time TIMESTAMPTZ,
    cs_end_time TIMESTAMPTZ,
    cs_duration_minutes INT,
    peeled_input_kg NUMERIC,
    whole_kernels_kg NUMERIC,
    broken_pieces_kg NUMERIC,
    dust_powder_kg NUMERIC,
    detailed_size_distribution JSONB,
    total_graded_output_kg NUMERIC,
    whole_kernel_yield_percent NUMERIC,
    dust_percent NUMERIC,
    material_balance_variance_percent NUMERIC,
    vibration_level NUMERIC,
    screen_size TEXT,
    feed_rate_kg_hr NUMERIC,
    machine_id TEXT,
    settings_profile TEXT,
    supervisor_id TEXT,
    notes TEXT
);

CREATE TABLE IF NOT EXISTS public.manual_peeling_refinement_logs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    manual_peel_batch_id TEXT UNIQUE NOT NULL,
    linked_batch_id TEXT,
    start_time TIMESTAMPTZ,
    end_time TIMESTAMPTZ,
    duration_minutes INT,
    input_kg NUMERIC,
    peeled_kg NUMERIC,
    waste_kg NUMERIC,
    yield_percent NUMERIC,
    number_of_workers INT,
    supervisor_id TEXT,
    notes TEXT
);

CREATE TABLE IF NOT EXISTS public.packaging_logs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    pack_batch_id TEXT UNIQUE NOT NULL,
    linked_qc_batch_id TEXT,
    pack_start_time TIMESTAMPTZ,
    pack_end_time TIMESTAMPTZ,
    pack_duration_minutes INT,
    approved_weight_kg NUMERIC,
    package_type TEXT,
    package_size_kg NUMERIC,
    packages_produced INT,
    net_weight_per_package_kg NUMERIC,
    total_packed_weight_kg NUMERIC,
    packaging_loss_kg NUMERIC,
    packaging_loss_percent NUMERIC,
    label_batch_code TEXT,
    production_date DATE,
    expiry_date DATE,
    label_verification_status TEXT,
    packaging_line_id TEXT,
    sealing_machine_id TEXT,
    workers_count INT,
    shift TEXT,
    supervisor_id TEXT,
    notes TEXT
);

CREATE TABLE IF NOT EXISTS public.quality_control_final_logs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    qc_batch_id TEXT UNIQUE NOT NULL,
    linked_grade_batch_id TEXT,
    qc_datetime TIMESTAMPTZ,
    qc_officer_id TEXT,
    sample_size_kg NUMERIC,
    moisture_content_final_percent NUMERIC,
    foreign_matter_final_percent NUMERIC,
    aflatoxin_level_ppb NUMERIC,
    ecoli_result TEXT,
    salmonella_result TEXT,
    other_microbiological_tests TEXT,
    export_certified TEXT,
    domestic_approved TEXT,
    rejection_reason TEXT,
    supervisor_id TEXT,
    notes TEXT
);

CREATE TABLE IF NOT EXISTS public.daily_summaries (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    date DATE UNIQUE NOT NULL,
    summary TEXT,
    insights TEXT,
    raw_inventory_changes TEXT,
    raw_production_highlights TEXT,
    created_at TIMESTAMPTZ DEFAULT now()
);

CREATE TABLE IF NOT EXISTS public.app_settings (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    key TEXT UNIQUE NOT NULL,
    value JSONB,
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now()
);


-- TABLE PERMISSIONS
-- Grant basic permissions for the anon role, which is used for client-side access.
-- The RLS policies below will provide the actual security.
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.rcn_intake TO anon;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.rcn_output_logs TO anon;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.other_materials_intake TO anon;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.goods_dispatched TO anon;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.steaming_processes TO anon;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.shelling_processes TO anon;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.drying_processes TO anon;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.peeling_processes TO anon;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.calibration_logs TO anon;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.rcn_quality_assessments TO anon;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.machine_grading_logs TO anon;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.manual_peeling_refinement_logs TO anon;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.packaging_logs TO anon;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.quality_control_final_logs TO anon;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.daily_summaries TO anon;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.app_settings TO anon;

-- POLICIES
-- Enable Row Level Security and define policies for each table.
-- This permissive policy allows all actions for any user.
-- Fine-grained control (e.g., based on user roles) can be added later if needed.
ALTER TABLE public.rcn_intake ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Public access for all users" ON public.rcn_intake;
CREATE POLICY "Public access for all users" ON public.rcn_intake FOR ALL USING (true) WITH CHECK (true);

ALTER TABLE public.rcn_output_logs ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Public access for all users" ON public.rcn_output_logs;
CREATE POLICY "Public access for all users" ON public.rcn_output_logs FOR ALL USING (true) WITH CHECK (true);

ALTER TABLE public.other_materials_intake ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Public access for all users" ON public.other_materials_intake;
CREATE POLICY "Public access for all users" ON public.other_materials_intake FOR ALL USING (true) WITH CHECK (true);

ALTER TABLE public.goods_dispatched ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Public access for all users" ON public.goods_dispatched;
CREATE POLICY "Public access for all users" ON public.goods_dispatched FOR ALL USING (true) WITH CHECK (true);

ALTER TABLE public.steaming_processes ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Public access for all users" ON public.steaming_processes;
CREATE POLICY "Public access for all users" ON public.steaming_processes FOR ALL USING (true) WITH CHECK (true);

ALTER TABLE public.shelling_processes ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Public access for all users" ON public.shelling_processes;
CREATE POLICY "Public access for all users" ON public.shelling_processes FOR ALL USING (true) WITH CHECK (true);

ALTER TABLE public.drying_processes ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Public access for all users" ON public.drying_processes;
CREATE POLICY "Public access for all users" ON public.drying_processes FOR ALL USING (true) WITH CHECK (true);

ALTER TABLE public.peeling_processes ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Public access for all users" ON public.peeling_processes;
CREATE POLICY "Public access for all users" ON public.peeling_processes FOR ALL USING (true) WITH CHECK (true);

ALTER TABLE public.calibration_logs ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Public access for all users" ON public.calibration_logs;
CREATE POLICY "Public access for all users" ON public.calibration_logs FOR ALL USING (true) WITH CHECK (true);

ALTER TABLE public.rcn_quality_assessments ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Public access for all users" ON public.rcn_quality_assessments;
CREATE POLICY "Public access for all users" ON public.rcn_quality_assessments FOR ALL USING (true) WITH CHECK (true);

ALTER TABLE public.machine_grading_logs ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Public access for all users" ON public.machine_grading_logs;
CREATE POLICY "Public access for all users" ON public.machine_grading_logs FOR ALL USING (true) WITH CHECK (true);

ALTER TABLE public.manual_peeling_refinement_logs ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Public access for all users" ON public.manual_peeling_refinement_logs;
CREATE POLICY "Public access for all users" ON public.manual_peeling_refinement_logs FOR ALL USING (true) WITH CHECK (true);

ALTER TABLE public.packaging_logs ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Public access for all users" ON public.packaging_logs;
CREATE POLICY "Public access for all users" ON public.packaging_logs FOR ALL USING (true) WITH CHECK (true);

ALTER TABLE public.quality_control_final_logs ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Public access for all users" ON public.quality_control_final_logs;
CREATE POLICY "Public access for all users" ON public.quality_control_final_logs FOR ALL USING (true) WITH CHECK (true);

ALTER TABLE public.daily_summaries ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Public access for all users" ON public.daily_summaries;
CREATE POLICY "Public access for all users" ON public.daily_summaries FOR ALL USING (true) WITH CHECK (true);

ALTER TABLE public.app_settings ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Public access for all users" ON public.app_settings;
CREATE POLICY "Public access for all users" ON public.app_settings FOR ALL USING (true) WITH CHECK (true);
